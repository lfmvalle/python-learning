import pandas as pd
import matplotlib.pyplot as plt
import warnings
import sys
import re
from time import time

verbose = True
t0 = time()
dados = {}

# Desativar avisos do openpyxl sobre formatação condicional na planilha de PI
warnings.filterwarnings('ignore', category=UserWarning, module='openpyxl')

# Variável para indicar caminho do arquivo
dir_PA = "."

##### LEITURA DOS DADOS #####
# skiprows e variável maxlotes devem ser alteradas se o layout da planilha
# mudar de um ano para outro
inp = pd.read_excel(dir_PA, "PA", skiprows=10, dtype=str) \
    .fillna("").to_dict()
maxlotes = len(inp['Unnamed: 0'].items()) - 4
print(f'Lotes encontrados: {maxlotes}')

dados = {}
limites = {}

#range = range(4,len(inp['Unnamed: 0'][0].items()))
inp2 = inp.copy()
for k1, v1 in inp2.items():
    for k2, v2 in v1.items():
        # Dados Qualitativos
        if re.findall('op', v2, re.IGNORECASE):
            dados['op'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('liber', v2, re.IGNORECASE):
            dados['dlib'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('lote', v2, re.IGNORECASE):
            dados['lote'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('tanque', v2, re.IGNORECASE):
            dados['tanque'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('quantidade', v2, re.IGNORECASE):
            v_qprod = int(k1.strip('Unnamed: '))
            k_qprodA = f'Unnamed: {v_qprod + 1}'
            k_qenv = f'Unnamed: {v_qprod + 2}'
            k_qenvA = f'Unnamed: {v_qprod + 3}'
            dados['qprod'] = \
                [float(inp2[k1][n]) for n in range(4, maxlotes + 4)]
            dados['qprodA'] = \
                [float(inp2[k_qprodA][n]) for n in range(4, maxlotes + 4)]
            dados['qenv'] = \
                [float(inp2[k_qenv][n]) for n in range(4, maxlotes + 4)]
            dados['qenvA'] = \
                [float(inp2[k_qenvA][n]) for n in range(4, maxlotes + 4)]
        if re.findall('processo', v2, re.IGNORECASE):
            dados['desvprod'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('ph\n', v2, re.IGNORECASE):
            dados['ph'] = [float(inp2[k1][n]) for n in range(4, maxlotes + 4)]
        if re.findall('d\n\(g', v2, re.IGNORECASE):
            dados['d'] = [float(inp2[k1][n]) for n in range(4, maxlotes + 4)]
        if re.findall('carac', v2, re.IGNORECASE):
            dados['carac'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('obs', v2, re.IGNORECASE):
            dados['obs'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        # Análises de teor
        if re.findall('análise', v2, re.IGNORECASE):
            dados['danalise'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]
        if re.findall('N\n', v2, re.IGNORECASE):
            global gar_N
            global linf_N
            global lsup_N
            gar_N = float(str(v2[-5:]).replace(',', '.'))
            linf_N = float(str(inp2[k1][2].replace(',', '.')[5:11]))
            lsup_N = float(str(inp2[k1][2].replace(',', '.')[17:23]))
            print(linf_N, lsup_N)
            dados['%N'] = [inp2[k1][n] for n in range(4, maxlotes + 4)]

for n, i in enumerate(dados['dlib']):
    if '-' and ':' in i:
        ano = i[0:4]
        mes = i[5:7]
        dia = i[8:10]
        dma = f'{dia}/{mes}/{ano}'
        dados['dlib'][n] = dma

tf = time()
print(f'\n' + '-' * 72 + f'\nTempo de Execução: {round(tf - t0, 2)} s')
